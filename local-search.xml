<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>yyyy</title>
    <link href="/2025/01/02/yyyy/"/>
    <url>/2025/01/02/yyyy/</url>
    
    <content type="html"><![CDATA[<h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA</a>许可协议。转载请注明来源：<a href="https://zhaoyinshan.github.io/">学无止境-YS Zhao</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php-hash-bypass</title>
    <link href="/2024/12/31/php-hash-bypass/"/>
    <url>/2024/12/31/php-hash-bypass/</url>
    
    <content type="html"><![CDATA[<h2 id="php弱比较："><a href="#php弱比较：" class="headerlink" title="php弱比较："></a>php弱比较：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>) &amp;&amp; <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用md5值为<strong>0e</strong>开头的字符串即可绕过。<strong>（php会把0e开头的字符串当作科学计数法表示的数。比如：1.1e22 代表数 1.1 乘 10^22，0exxxxx 代表的是 0 乘 10^xxxxx，也就是 0）</strong>，这种字符串有：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># php中MD5弱比较，常见的md5开头为0e的字符串</span><br><br><span class="hljs-meta"># QNKCDZO</span><br><span class="hljs-meta"># 240610708</span><br><span class="hljs-meta"># s878926199a</span><br><span class="hljs-meta"># s155964671a</span><br><span class="hljs-meta"># s214587387a</span><br><span class="hljs-meta"># 0e215962017</span><br><br><span class="hljs-meta"># 比如：POST a=QNKCDZO&amp;b=240610708</span><br></code></pre></td></tr></table></figure><p>如果若比较中多次进行md5或者和其他算法（如sha1）嵌套，那么需要python来爆破。比如下面的题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$a</span>)) == <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$b</span>))) &amp;&amp; <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用下面的python脚本来爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">php hash brute force</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hash</span>(<span class="hljs-params">content: <span class="hljs-built_in">str</span>, algorithm: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">for</span> algo <span class="hljs-keyword">in</span> algorithm:<br>        <span class="hljs-keyword">if</span> algo <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashlib.algorithms_available:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;algo&#125;</span> is not available&#x27;</span>)<br>            <br>    result = hashlib.new(algorithm[<span class="hljs-number">0</span>], content.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">for</span> algo <span class="hljs-keyword">in</span> algorithm[<span class="hljs-number">1</span>:]:<br>        result = hashlib.new(algo, result.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 默认情况下 爆破1次md5，目标长度是4，默认字符集是数字字母</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute</span>(<span class="hljs-params">algorithm=[<span class="hljs-string">&#x27;md5&#x27;</span>], charset=digits+ascii_letters, length=<span class="hljs-number">4</span></span>):<br>    <span class="hljs-keyword">for</span> candidate <span class="hljs-keyword">in</span> permutations(charset, length):<br>        candidate_str = <span class="hljs-string">&#x27;&#x27;</span>.join(candidate)<br>        <span class="hljs-built_in">hash</span> = get_hash(candidate_str, algorithm)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hash</span>.startswith(<span class="hljs-string">&#x27;0e&#x27;</span>):<br>            <span class="hljs-keyword">return</span> candidate_str, <span class="hljs-built_in">hash</span><br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Not Found&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 对应php代码：md5(sha1($a))</span><br>    <span class="hljs-built_in">print</span>(brute(algorithm=[<span class="hljs-string">&#x27;sha1&#x27;</span>, <span class="hljs-string">&#x27;md5&#x27;</span>]))<br><br>    <span class="hljs-comment"># 对应php代码：sha1(sha1(sha1($b)))</span><br>    <span class="hljs-built_in">print</span>(brute(algorithm=[<span class="hljs-string">&#x27;sha1&#x27;</span>]*<span class="hljs-number">3</span>,))<br></code></pre></td></tr></table></figure><h2 id="php强比较"><a href="#php强比较" class="headerlink" title="php强比较"></a>php强比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>) &amp;&amp; <span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用数组即可绕过。<strong>因为php中的数组经过md5处理</strong>，得到的是null。null &#x3D;&#x3D;&#x3D; null。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"># POST a<span class="hljs-comment">[]</span>=1&amp;b<span class="hljs-comment">[]</span>=2<br></code></pre></td></tr></table></figure><h2 id="字符串强比较"><a href="#字符串强比较" class="headerlink" title="字符串强比较"></a>字符串强比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>) &amp;&amp; (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$a</span> !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$b</span>)<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;success&#x27;</span>;<br><br><span class="hljs-variable">$arr1</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-variable">$arr2</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$arr1</span>, <span class="hljs-string">&quot;\n&quot;</span>, (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$arr2</span>, <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-comment">// Array</span><br><span class="hljs-comment">// Array</span><br><span class="hljs-comment">// 无论数组中是什么内容，都会被转换为Array，所以这个不能用数组绕过</span><br></code></pre></td></tr></table></figure><p>此时数组不能绕过了，可以使用碰撞：[fastcoll](<a href="https://github.com/brimstone/fastcoll?tab=readme-ov-file">GitHub - brimstone&#x2F;fastcoll</a>)。</p><h3 id="fastcoll"><a href="#fastcoll" class="headerlink" title="fastcoll"></a>fastcoll</h3><p>这个工具的作用是生成两个内容不同但md5相同的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编译fastcoll</span><br>wget https://github.com/brimstone/fastcoll/archive/refs/heads/master.zip<br>unzip master.zip<br>cd fastcoll-master/<br>sudo apt install libboost1.74-all-dev<br>g++ *.cpp -std=c++11 -lboost_program_options -lboost_filesystem -o fastcoll-static -static<br>g++ *.cpp -std=c++11 -lboost_program_options -lboost_filesystem -o fastcoll<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用fastcoll生成两个md5相同内容不同的文件</span><br>./fastcoll -o a1.bin a2.bin<br>cp *.bin ..<br></code></pre></td></tr></table></figure><p>工具的使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastcoll -o a1.bin a2.bin<br></code></pre></td></tr></table></figure><p>将碰撞出来的文件使用yakit读取，并且url编码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apppple=&#123;&#123;url(&#123;&#123;file(C:\Users\zhao\Desktop\a1.bin)&#125;&#125;)&#125;&#125;&amp;banananana=&#123;&#123;url(&#123;&#123;file(C:\Users\zhao\Desktop\a2.bin)&#125;&#125;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><strong>为什么要用Yakit？</strong> 因为php和python的urlencode的结果发送出去都不行，离谱。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自己实现的url全编码，但是发出去也不对</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file2urlencode</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        binary_content = file.read()<br>    url_encoded_content=<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&quot;%&quot;</span>+<span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> binary_content])<br>    <span class="hljs-keyword">return</span> url_encoded_content<br><br><span class="hljs-built_in">print</span>(file2urlencode(<span class="hljs-string">&#x27;./a1.bin&#x27;</span>))<br><span class="hljs-built_in">print</span>(file2urlencode(<span class="hljs-string">&#x27;./a2.bin&#x27;</span>))<br></code></pre></td></tr></table></figure><p>下面的php也是不行的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;a1.bin&#x27;</span>)), <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;a2.bin&#x27;</span>)), <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="MD5长度扩展攻击"><a href="#MD5长度扩展攻击" class="headerlink" title="MD5长度扩展攻击"></a>MD5长度扩展攻击</h2><p>原理自行上网了解。<br>攻击需要已知明文的<strong>长度</strong>和该明文对应的<strong>MD5</strong>值。<br>攻击脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, sin<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D = \<br>            (<span class="hljs-number">0x67452301</span>, <span class="hljs-number">0xefcdab89</span>, <span class="hljs-number">0x98badcfe</span>, <span class="hljs-number">0x10325476</span>)  <span class="hljs-comment"># initial values</span><br>        <span class="hljs-variable language_">self</span>.r: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">5</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>] * <span class="hljs-number">4</span> + \<br>            [<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>] * <span class="hljs-number">4</span> + [<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>] * <span class="hljs-number">4</span>  <span class="hljs-comment"># shift values</span><br>        <span class="hljs-variable language_">self</span>.k: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = \<br>            [floor(<span class="hljs-built_in">abs</span>(sin(i + <span class="hljs-number">1</span>)) * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>))<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]  <span class="hljs-comment"># constants</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_lrot</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; <span class="hljs-number">32</span> - n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, chunk: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        w = <span class="hljs-built_in">list</span>(unpack(<span class="hljs-string">&#x27;&lt;&#x27;</span>+<span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">16</span>, chunk))<br>        a, b, c, d = <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">16</span>:<br>                f = (b &amp; c) | ((~b) &amp; d)<br>                flag = i<br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">32</span>:<br>                f = (b &amp; d) | (c &amp; (~d))<br>                flag = (<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">elif</span> i &lt; <span class="hljs-number">48</span>:<br>                f = (b ^ c ^ d)<br>                flag = (<span class="hljs-number">3</span> * i + <span class="hljs-number">5</span>) % <span class="hljs-number">16</span><br>            <span class="hljs-keyword">else</span>:<br>                f = c ^ (b | (~d))<br>                flag = (<span class="hljs-number">7</span> * i) % <span class="hljs-number">16</span><br>            tmp = b+<span class="hljs-variable language_">self</span>._lrot((a+f+<span class="hljs-variable language_">self</span>.k[i] + w[flag]) &amp; <span class="hljs-number">0xffffffff</span>, <span class="hljs-variable language_">self</span>.r[i])<br>            a, b, c, d = d, tmp &amp; <span class="hljs-number">0xffffffff</span>, b, c<br>        <span class="hljs-variable language_">self</span>.A = (<span class="hljs-variable language_">self</span>.A + a) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.B = (<span class="hljs-variable language_">self</span>.B + b) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.C = (<span class="hljs-variable language_">self</span>.C + c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-variable language_">self</span>.D = (<span class="hljs-variable language_">self</span>.D + d) &amp; <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(msg) % <span class="hljs-number">64</span> == <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(msg), <span class="hljs-number">64</span>):<br>            <span class="hljs-variable language_">self</span>.update(msg[i:i + <span class="hljs-number">64</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        length = pack(<span class="hljs-string">&#x27;&lt;Q&#x27;</span>, <span class="hljs-built_in">len</span>(msg) * <span class="hljs-number">8</span>)<br>        msg += <span class="hljs-string">b&#x27;\x80&#x27;</span><br>        msg += <span class="hljs-string">b&#x27;\x00&#x27;</span> * ((<span class="hljs-number">56</span> - <span class="hljs-built_in">len</span>(msg)) % <span class="hljs-number">64</span>)<br>        msg += length<br>        <span class="hljs-keyword">return</span> msg<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">digest</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>        <span class="hljs-keyword">return</span> pack(<span class="hljs-string">&#x27;&lt;IIII&#x27;</span>, <span class="hljs-variable language_">self</span>.A, <span class="hljs-variable language_">self</span>.B, <span class="hljs-variable language_">self</span>.C, <span class="hljs-variable language_">self</span>.D)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">message_len: <span class="hljs-built_in">int</span>, known_hash: <span class="hljs-built_in">str</span>, append_str: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    md5 = MD5()<br>    previous_text = md5.padding(<span class="hljs-string">b&quot;*&quot;</span> * message_len)<br>    current_text = previous_text + append_str<br>    md5.A, md5.B, md5.C, md5.D = unpack(<span class="hljs-string">&quot;&lt;IIII&quot;</span>, <span class="hljs-built_in">bytes</span>.fromhex(known_hash))<br>    md5.extend(md5.padding(current_text)[<span class="hljs-built_in">len</span>(previous_text):])<br>    <span class="hljs-keyword">return</span> current_text[message_len:], md5.digest().<span class="hljs-built_in">hex</span>()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    message_len = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known text length: &quot;</span>))<br>    known_hash = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input known hash: &quot;</span>).strip()<br>    append_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[&gt;] Input append text: &quot;</span>).strip().encode()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attacking...&quot;</span>)<br>    extend_str, final_hash = attack(message_len, known_hash, append_text)<br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br>    <span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text:&quot;</span>, extend_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (URL encoded):&quot;</span>, quote(extend_str))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Extend text (Base64):&quot;</span>, b64encode(extend_str).decode())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Final hash:&quot;</span>, final_hash)<br></code></pre></td></tr></table></figure><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">// 你以为这就结束了</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>])) &#123;<br><span class="hljs-comment">// 这里的长度可以自己计算   为96</span><br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>] = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>)) . <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">16</span>));<br>&#125;<br><br><span class="hljs-comment">// 你想看到 random 的值吗?</span><br><span class="hljs-comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;random&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>] ?? <span class="hljs-string">&#x27;user&#x27;</span>;<br><br><span class="hljs-comment">// check if name ends with &#x27;admin&#x27;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, -<span class="hljs-number">5</span>) !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;不是管理员也来凑热闹?&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$md5</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$random</span> . <span class="hljs-variable">$name</span>) !== <span class="hljs-variable">$md5</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;伪造? NO NO NO!&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 认输了, 看样子你真的很懂 MD5</span><br><span class="hljs-comment">// 那 flag 就给你吧</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;看样子你真的很懂 MD5&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: gz.imxbt.cn:<span class="hljs-number">20692</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=<span class="hljs-number">8</span>f6e3i7s91v0a2lah6g5gk7j16<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">131.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">131.0.0.0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-GB;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><br><span class="hljs-attribute">md5</span>=bee0e0cbd622a1e162536bd3ad9ea067&amp;name=%<span class="hljs-number">80</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">03</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>%<span class="hljs-number">00</span>admin<br></code></pre></td></tr></table></figure><h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>本博客所有文章除特别声明外，均采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA</a>许可协议。转载请注明来源：<a href="https://zhaoyinshan.github.io/">学无止境-YS Zhao</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>bypass</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
